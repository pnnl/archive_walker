# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/MultiChanPer_GMSC_fast_FreqRef_function.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=FALSE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + BuiltFO$FO[ChanIdx,]*sqrt(10^(SPNSR_max_dB/10))
PerOut = MultiChanPer_GMSC_fast_FreqRef(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed,FreqTol)
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/GMSC_faster_function.R')
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/MultiChanPer_GMSC_fast_FreqRef_function.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/GMSC_faster_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=FALSE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + BuiltFO$FO[ChanIdx,]*sqrt(10^(SPNSR_max_dB/10))
PerOut = MultiChanPer_GMSC_fast_FreqRef(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed,FreqTol)
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/GetAllFFT.R')
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/MultiChanPer_GMSC_fast_FreqRef_function.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/GMSC_faster_function.R')
source('~/Spectral Coherence FY15/ApplicationToPMUdata/Functions/GetAllFFT.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=FALSE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + BuiltFO$FO[ChanIdx,]*sqrt(10^(SPNSR_max_dB/10))
PerOut = MultiChanPer_GMSC_fast_FreqRef(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed,FreqTol)
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=FALSE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + BuiltFO$FO[ChanIdx,]*sqrt(10^(SPNSR_max_dB/10))
PerOut = MultiChanPer_GMSC_fast_FreqRef(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed,FreqTol)
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=FALSE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + BuiltFO$FO[ChanIdx,]*sqrt(10^(SPNSR_max_dB/10))
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
source('~/Mode Meter FY15/Final/Algs/cpsd_function.R')
source('~/Mode Meter FY15/Final/Algs/cpsd_function.R')
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
source('~/Mode Meter FY15/Final/Algs/pwelch_function.R')
source('~/Mode Meter FY15/Final/Algs/pwelch_function.R')
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
dim(SigMat)
plot(SigMat[1,],type="l")
plot(SigMat[2,],type="l")
BuiltFO
plot(BuiltFO.FO[2,],type="l")
plot(BuiltFO$FO[2,],type="l")
ChanIdx
BuiltFO$SPNSR
FOfreqAct
ChanIdx
?rep
?matrix
FOidx = 1:9000
s = matrix(0,dim(BuiltFO$FO[ChanIdx,],1),dim(BuiltFO$FO[ChanIdx,],2))
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
?dim
FOidx = 1:9000
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
plot(SigMat[2,],type="l")
plot(SigMat[1,],type="l")
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
?real
?Re
plot(Re(Specs[1,1,]),type="l")
plot(Re(Specs[2,2,]),type="l")
plot(Re(Specs[3,3,]),type="l")
Nmed
600*30
180*30
240*30
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/cpsd_function.R')
source('~/Mode Meter FY15/Final/Algs/pwelch_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 150
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=TRUE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
FOidx = 5401:7200
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
plot(SigMat[1,],type="l")
plot(SigMat[2,],type="l")
BuiltFO$SPNSR
AddOrder
plot(TestStat,type="l")
plot(PerOut$TestStat,type="l")
plot(f,PerOut$TestStat,type="l")
gam_indy
gam_ident
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
?lines
lines(f,gam_ident,col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,rep(gam_indy,B),col="red")
lines(f,gam,col="red")
lines(f,PerOut$gam,col="red")
plot(f,PerOut$gam,col="red")
length(PerOut$gam)
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
lines(f,PerOut$gam,col="red")
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
lines(f,gam_theory,col="green")
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/cpsd_function.R')
source('~/Mode Meter FY15/Final/Algs/pwelch_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 300
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=0,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=TRUE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
FOidx = 5401:7200
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
plot(f,PerOut$TestStat,type="l")
lines(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
Nmed = 61
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
plot(f,PerOut$TestStat,type="l")
lines(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
FOidx = 1:18000
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
plot(f,PerOut$TestStat,type="l")
lines(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
plot(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
# This script applies the multichannel algorithms to ambient data.
# Test statistics from each algorithm are collected.
# Based on these test statistics, the threshold needed to achieve the desired Pfa is estimated.
# For the Periodogram method, this threshold should be compared to the one you get when you scale by the GMSC
rm(list = setdiff(ls(), lsf.str()))
library(FBN)
library(signal)
library(R.matlab)
library(matrixStats)
library(robfilter)
library(snowfall)
source('~/Mode Meter FY15/Final/Simulation/BuildFO.R')
source('~/Mode Meter FY15/Final/Simulation/FindGainPhase.R')
source('~/Mode Meter FY15/Final/Algs/GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/MultiChanPer_GMSC_function.R')
source('~/Mode Meter FY15/Final/Algs/cpsd_function.R')
source('~/Mode Meter FY15/Final/Algs/pwelch_function.R')
data = readMat("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.mat")
# load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\data.RData")
NumTrial = length(data$yAll)
# NumTrial = 2
sample.rate = 30
load("C:\\Users\\foll154\\Documents\\Mode Meter FY15\\Final\\Simulation\\Specs.RData")
B = length(OmegaB)
FObin = 300
FOfreqAct = f[FObin]
print(FOfreqAct)
# Build the FOs to have a maximum SPNSR of Y dB.
# Multiplying the FOs by sqrt(10^(X/10)) will bring the max SPNSR to Y+X.
# Makes the most sense to have Y=0 so that X is the SPNSR
BuiltFO = BuildFO(data,FOfreqAct,SPNSR_max_dB=-20,ChanToInclude=1:8)
AddOrder = sort(BuiltFO$SPNSR[,1],decreasing=TRUE,index.return=TRUE)$ix
# Periodogram parameters
Pfa = 0.001
win_Per = hamming(N)
win_GMSC = hamming(N/3)
Noverlap_GMSC = length(win_GMSC)/2
Nmed = 37
FreqTol = NA
NumChan = 2
ChanIdx = AddOrder[1:NumChan]
# Periodogram thresholds
gam_indy = qchisq(1-Pfa/B,2*NumChan)
gam_ident = NumChan*qchisq(1-Pfa/B,2)
SPNSR_max_dB = 0
trial = 1
FOidx = 5401:7200
FOidx = 1:18000
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
plot(f,PerOut$TestStat,type="l")
lines(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
dim(t)
plot(SigMat[1,],type="l")
plot(SigMat[2,],type="l")
FOidx = 5401:7200
# FOidx = 1:18000
s = matrix(0,dim(BuiltFO$FO[ChanIdx,])[1],dim(BuiltFO$FO[ChanIdx,])[2])
s[,FOidx] = BuiltFO$FO[ChanIdx,FOidx]*sqrt(10^(SPNSR_max_dB/10))
SigMat = data$yAll[[trial]][ChanIdx,,drop=FALSE] + s
PerOut = MultiChanPer_GMSC(SigMat,win_Per,win_GMSC,Noverlap_GMSC,K0,sample.rate,f,OmegaB,gam_indy,gam_ident,Nmed)
C = abs(Specs[AddOrder[1],AddOrder[2],])^2/(Re(Specs[AddOrder[1],AddOrder[1],])*Re(Specs[AddOrder[2],AddOrder[2],]))
gam_theory = gam_indy*(1-C) + gam_ident*C
plot(f,PerOut$TestStat,type="l")
lines(f,rep(gam_indy,B),col="red")
lines(f,rep(gam_ident,B),col="red")
lines(f,PerOut$gam,col="red")
lines(f,gam_theory,col="green")
plot(SigMat[1,],type="l")
plot(SigMat[2,],type="l")
5400/30/60
7200/30/60
